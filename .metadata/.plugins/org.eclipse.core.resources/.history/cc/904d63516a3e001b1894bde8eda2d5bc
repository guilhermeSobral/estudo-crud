package com.crudcompleto.service;

import java.math.BigDecimal;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.crudcompleto.controllers.exceptions.ObjetoNaoEncontradoException;
import com.crudcompleto.entities.Produto;
import com.crudcompleto.repositories.ProdutoRepository;

@Service
public class ProdutoService implements ICrudService {
	
	@Autowired
	private ProdutoRepository repository;
	
	public Produto save(Produto produto) {
		Function<ProdutoRepository, Produto> function = repository -> repository.save(produto);
		return findOrSave(function, repository);
	}
	
	public List<Produto> filterByName(String name) {
		var list = findAll();
		Predicate<Produto> predicate = produto -> produto.getNome()
				.toLowerCase()
				.contains(name.toLowerCase());
		return filter(predicate, list);
	}
	
	public List<Produto> filterByPrice(String operation, BigDecimal price) {
		var list = findAll();
		Predicate<Produto> predicate;
		if(operation.equals("+")) {
			predicate = produto -> produto.getPreco().compareTo(price) >= 0;
			return filter(predicate, list);
		}
		predicate = produto -> produto.getPreco().compareTo(price) <= 0;
		return filter(predicate, list);
	}
	
	public List<Produto> findAll() {
		Function<ProdutoRepository, List<Produto>> function = repository -> repository.findAll();
		return findOrSave(function, repository);
	}
	
	public Produto findById(Long id) {
		Function<ProdutoRepository, Produto> function = repository ->  repository.findById(id)
				.orElseThrow(() -> new ObjetoNaoEncontradoException(String.format("O produto de ID: %d n√£o foi encontrado", id)));
		return findOrSave(function, repository);
	}
	
	public void updateProduto(Long id, Produto update) {
		var produto = findById(id);
		produto.setNome(update.getNome());
		produto.setPreco(update.getPreco());
		save(produto);
	}
	
	public void deleteProduto(Long id) {
		Consumer<ProdutoRepository> consumer = repository -> repository.deleteById(id);
		delete(consumer, repository);
	}	
}
